name: Assemble ATAK

on:
  pull_request:

jobs:
  assemble:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:        
    - name: Checkout github repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '8'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Update APT repos
      run: sudo apt update

    - name: Install APT dependencies
      run: |
        sudo apt -y install git-lfs ant apg dos2unix autoconf automake g++ libtool patch make cmake ninja-build swig tclsh python3-pip

    - name: Install pip dependencies
      run: |
        pip3 install -U pip setuptools
        pip3 install conan==1.59.0

    - name: Checkout LFS objects
      run: |
        git lfs install --local
        git lfs fetch
        git lfs checkout

    - name: set environment
      run: |
        echo "ANDROID_COMPILE_SDK=29" >> $GITHUB_ENV
        echo "ANDROID_BUILD_TOOLS=29.0.3" >> $GITHUB_ENV
        echo "ANDROID_SDK_TOOLS=4333796" >> $GITHUB_ENV
        echo "NDK_VERSION=12b" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS=CI" >> $GITHUB_ENV
        echo "KEYSTORE_STORE_PASSWORD=$(apg -a 1 -n 1 -m 16 -x 16 -E '\')" >> $GITHUB_ENV
        echo "KEYSTORE_KEY_PASSWORD=$(apg -a 1 -n 1 -m 16 -x 16 -E '\')" >> $GITHUB_ENV
        mkdir $HOME/secrets

    - name: Cache Android SDK
      uses: actions/cache@v3
      with:
        path: android-sdk-linux
        key: android-sdk-linux

    - name: Install Android SDK (if not cached)
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
       wget --quiet --tries=0 --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip;
       unzip -qq -d android-sdk-linux android-sdk.zip;
       mkdir -p ~/.android;
       touch ~/.android/repositories.cfg;
       echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null;
       echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null;
       echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null;
       echo "ANDROID_HOME=$PWD/android-sdk-linux" >> $GITHUB_ENV
       echo "$PWD/android-sdk-linux/platform-tools/" >> $GITHUB_PATH
       set +o pipefail
       yes | android-sdk-linux/tools/bin/sdkmanager --licenses
       set -o pipefail

    - name: Cache Android NDK
      uses: actions/cache@v3
      with:
        path: android-ndk-r${{ env.NDK_VERSION }}
        key: android-ndk-r${{ env.NDK_VERSION }}
        
    - name: Install Android NDK (if not cached)
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
       wget --quiet --tries=0 --output-document=android-ndk.zip https://dl.google.com/android/repository/android-ndk-r${NDK_VERSION}-linux-x86_64.zip;
       pwd;
       unzip -qq android-ndk.zip;  
       echo "ANDROID_NDK_HOME=$PWD/android-ndk-r${NDK_VERSION}" >> $GITHUB_ENV
       echo "ANDROID_NDK=$PWD/android-ndk-r${NDK_VERSION}" >> $GITHUB_ENV

    - name: Cache CMake
      uses: actions/cache@v3
      with:
        path: cmake-3.14.7-Linux-x86_64
        key: cmake-3.14.7-Linux-x86_64

    - name: Install CMake (if not cached)
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
       wget --quiet --tries=0 --output-document=cmake-3.14.7.tar.gz https://cmake.org/files/v3.14/cmake-3.14.7-Linux-x86_64.tar.gz;
       gzip -d cmake-3.14.7.tar.gz;
       tar xf cmake-3.14.7.tar;
       rm -rf cmake-3.14.7.tar;
       echo "CMAKE_HOME=$PWD/cmake-3.14.7-Linux-x86_64" >> $GITHUB_ENV

    - name: Build Dependencies
      run: |
        git submodule update --init --recursive
        pushd .
        cd scripts
        pwd
        env
        bash ./prebuild.sh
        popd
        cd takthirdparty
        rm -rf distfiles ; \
        for i in builds/* ; do \
            pushd $i ; \
            (find * -type d -not -name "include" -not -path "include/*" -not -name "java" -not -name "lib" -not -path "lib/ogdi" -print0 | xargs -0 -I {} rm -rf {}) ; \
            (find . -maxdepth 1 -type f -print0 | xargs -0 -I {} rm -f {}) ; \
            (cd lib && (find . -maxdepth 1 -type f -not -name "*.so" -print0 | xargs -0 -I {} rm -f {})) ; \
            popd ; \
        done

    - name: Create Keystore
      run: |
        echo y | $JAVA_HOME/bin/keytool -genkeypair -dname "cn=ATAK CIV, ou=, o=, c=US" -alias $KEYSTORE_ALIAS -keypass $KEYSTORE_KEY_PASSWORD -keystore $HOME/secrets/android_keystore -storepass $KEYSTORE_STORE_PASSWORD -validity 10000
        cd atak
        rm -rf local.properties
        echo "takDebugKeyFile=$HOME/secrets/android_keystore" >> local.properties
        echo "takDebugKeyFilePassword=$KEYSTORE_STORE_PASSWORD" >> local.properties
        echo "takDebugKeyAlias=$KEYSTORE_ALIAS" >> local.properties
        echo "takDebugKeyPassword=$KEYSTORE_KEY_PASSWORD" >> local.properties
        echo "takReleaseKeyFile=$HOME/secrets/android_keystore" >> local.properties
        echo "takReleaseKeyFilePassword=$KEYSTORE_STORE_PASSWORD" >> local.properties
        echo "takReleaseKeyAlias=$KEYSTORE_ALIAS" >> local.properties
        echo "takReleaseKeyPassword=$KEYSTORE_KEY_PASSWORD" >> local.properties

    - name: Assemble ATAK APK
      run: |
        cd atak
        echo "cmake.dir=$CMAKE_HOME" >> local.properties
        echo "ndk.dir=$ANDROID_NDK" >> local.properties
        rm -rf ATAK/app/build
        bash ./gradlew generateJniHeaders
        bash ./gradlew assembleCivSdk

    - name: generate ATAK CIV SDK package
      run: |
        rm -rf takthirdparty
        rm -rf takengine
        rm -rf pluginsdk/
        unzip -qq pluginsdk.zip
        cp ./atak/ATAK/app/build/outputs/apk/civ/sdk/*-sdk.apk ./pluginsdk/atak.apk
        cp ./atak/ATAK/app/build/libs/main.jar ./pluginsdk
        cp ./atak/ATAK/app/src/main/assets/support/license/LICENSE.txt ./pluginsdk
        cp -r ./plugin-examples ./pluginsdk/
        echo "ATAK CIV SDK `git rev-parse --short HEAD` (`git show -s --format=%ct`)" > pluginsdk/VERSION.txt
        rm -rf javadoc
        mkdir -p tmp/src
        cp -R ./atak/ATAK/app/src/common/java/* tmp/src
        cp -R ./atak/ATAK/app/src/main/java/* tmp/src
        pushd .
        cd tmp/src && javadoc -linkoffline http://d.android.com/reference file://$ANDROID_HOME/docs/reference -d ../javadoc -classpath .:$ANDROID_HOME/platforms/android-${ANDROID_COMPILE_SDK}/android.jar -subpackages . &> /dev/null || echo "success by failure"
        popd
        pushd .
        cd tmp/javadoc && jar cvf ../../pluginsdk/atak-javadoc.jar .
        popd
        pushd .
        cd atak-gradle-takdev
        chmod 755 gradlew
        dos2unix gradlew
        ./gradlew jar
        cp ./build/libs/atak-gradle-takdev-*.jar ../pluginsdk/atak-gradle-takdev.jar
        popd
        mv pluginsdk atak-civ-sdk

    - name: Upload SDK build output
      uses: actions/upload-artifact@v4
      with:
        name: assembleCivSdk
        path: |
            atak-civ-sdk
